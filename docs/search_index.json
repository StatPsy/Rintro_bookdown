[["introduction.html", "Guide R Chapter 1 Introduction", " Guide R Prof. Audrey Bürki, Samuel Arthers, Mégane Bollenrücher 2024-10-13 Chapter 1 Introduction Ceci est le guide R que nous proposons pour vous accompagner durant le cours de Statistiques I. "],["installation-et-environnement-r-et-rstudio.html", "Chapter 2 Installation et environnement R et Rstudio 2.1 Présentation des logiciels 2.2 Installation 2.3 Environnement de travail", " Chapter 2 Installation et environnement R et Rstudio 2.1 Présentation des logiciels R est un langage de programmation adapté au traitement de données et à l’analyse statistique. Pour programmer en langage R, il est nécessaire d’installer deux outils essentiels: Le logiciel R permet de traduire du texte sous forme de code R en binaire qui est le langage interne du processeur de l’ordinateur. Le logiciel RStudio permet de faciliter l’utilisation du logiciel R en donnant l’accès à une interface utilisateur. Il est possible de faire une analogie avec une voiture. Le logiciel R est le moteur et RStudio est le tableau de bord. Sans le tableau de bord, il n’est pas possible de controler le moteur. 2.2 Installation Installer R sur le site de R. Choisir et télécharger la version de R selon votre système d’exploitation. Pour windows : https://cran.r-project.org/bin/windows/base/ Pour MAC : https://cran.r-project.org/bin/macosx/ Pour Linux : https://cran.r-project.org/index.html Installer le logiciel R sur votre ordinateur en exécutant le fichier téléchargé. Installer RStudio sur le site suivant: https://posit.co/download/rstudio-desktop/ Après avoir installé ces deux logiciels, vous aurez accès à deux nouvelles applications. Cependant, nous utiliserons uniquement RStudio pour programmer. Lorsque vous exécuterez votre code écrit sur RStudio, ce dernier fera automatiquement appel à R pour exécuter les codes. 2.3 Environnement de travail Une fois que RStudio est lancé, une interface découpée en plusieurs zones se présente. Ces parties parties peuvent être redimensionnées, masquées ou maximisées selon vos préférences. Chacune des quatre zones a sa propre utilité: Cette zone est dédiée aux fichiers sources. Ce volet permet d’écrire et de sauvegarder les lignes de code. Ce sera la partie la plus utilisée lors de la programmation. Cette zone fournit des informations sur les objets, les variables et les données en mémoire sous l’onglet Environment. La console est affichée en bas à gauche. Cette partie permet d’entrer et d’exécuter des instructions et voir les résultats s’afficher. Cette zone permet de naviguer dans le répertoire de travail dans l’onglet Files, d’afficher les graphes réalisés dans l’onglet Plots, d’afficher les extensions/packages disponibles sous l’onglet Packages et également d’afficher l’aide (qui est très complète) sous l’onglet Help. "],["objets-et-opérateurs.html", "Chapter 3 Objets et opérateurs 3.1 Objets dans R 3.2 Opérateurs logiques", " Chapter 3 Objets et opérateurs 3.1 Objets dans R Une variable permet de stocker une valeur ou un objet dans R. De cette façon, il sera possible d’accéder à la valeur ou à l’objet qui est stocké dans la variable. # Assignation de la valeur 3 à la variable &quot;ma_variable&quot; ma_variable &lt;- 3 La ligne de code ci-dessus déclare une variable nommée “ma_variable” et lui assigne la valeur de 3. L’exécution de ce code n’affiche pas de résultat dans la console, mais l’objet nommé “ma_variable” est bien créée et stockée dans l’environnement. Pour afficher le contenu de la variable, il suffit de taper le nom de celle-ci pour l’afficher dans la console. # Affichage du contenu de la variable &quot;ma_variable&quot; ma_variable ## [1] 3 De plus, il est également possible d’utiliser la fonction print() qui permet d’afficher la valeur ou l’objet de la variable sélectionnée. # Affichage du contenur de la variable &quot;ma_variable&quot; print(ma_variable) ## [1] 3 En langage R, il existe différents types d’objets qui peuvent être assignés à des variables comme les scalaires, les vecteurs, les facteurs, les matrices et les bases de données. Ces objets sont présentés dans les points suivants. 3.1.1 Scalaire Un scalaire permet de stocker un objet sous forme de valeur numérique, de chaîne de caractères ou de valeur logique. # Scalaire numerique a &lt;- 3 a ## [1] 3 Une chaîne de caractères est une suite de caractères qui doit être écrit entre guillemets (” “). # Scalaire sous forme d&#39;une chaine de caractères b &lt;- &quot;Statistique&quot; b ## [1] &quot;Statistique&quot; Une valeur logique est une quantitée binaire (vrai ou faux). Ces variables s’écrivent TRUE et FALSE. Il est également possible d’utiliser T et F comme abréviations. # Scalaire logique c &lt;- TRUE c ## [1] TRUE d &lt;- F d ## [1] FALSE 3.1.2 Vecteur Un vecteur est un objet qui permet de stocker une liste ordonnée d’éléments. Les éléments d’un vecteur doivent être du même type. Pour pouvoir stocker une information dans un seul objet, il faut utiliser la fonction c() qui permet de combiner les arguments de la fonction. # Vecteur numérique a &lt;- c(1, 2, 3, 4, 5, 6) a ## [1] 1 2 3 4 5 6 # Vecteur sous forme d&#39;une chaine de caractères b &lt;- c(&quot;Un&quot;, &quot;Deux&quot;, &quot;Trois&quot;, &quot;Quatre&quot;, &quot;Cinq&quot;, &quot;Six&quot;) b ## [1] &quot;Un&quot; &quot;Deux&quot; &quot;Trois&quot; &quot;Quatre&quot; &quot;Cinq&quot; &quot;Six&quot; # Vecteur logique c &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE) c ## [1] TRUE FALSE TRUE FALSE FALSE TRUE Étant donné que le vecteur est un objet ordonné, il est possible d’accéder, remplacer ou modifier un ou plusieurs éléments par rapport à leur position dans l’objet. Il est nécessaire d’utiliser les crochets [ ] pour indiquer le ou les éléments à manipuler. Pour accéder un seul élément du vecteur, il suffit d’écrire le nom de la variable suivi de crochets contenant la position de l’élément sélectionné. # Extraction d&#39;un élément: b[2] ## [1] &quot;Deux&quot; Il est possible d’accéder à plusieurs éléments en mettant un vecteur de position entre crochets. # Extraction de plusieurs éléments: b[c(2,3,5)] ## [1] &quot;Deux&quot; &quot;Trois&quot; &quot;Cinq&quot; Il est aussi possible d’accéder à une série d’éléments à la suite en mettant le signe : entre les 2 positions désirées. # Extraction d&#39;une série d&#39;éléments: b[2:5] ## [1] &quot;Deux&quot; &quot;Trois&quot; &quot;Quatre&quot; &quot;Cinq&quot; Il est également possible d’accéder à certaines lignes en fonction de la valeur logique d’un vecteur ayant la même taille du vecteur sélectionné. Si la position est mise à TRUE, la valeur sera sélectionnée et dans le cas dans lequel la valeur est mise à FALSE la valeur ne sera pas retenue. # Extraction de plusieurs éléments en fontion de la valeur logique: b[c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)] ## [1] &quot;Deux&quot; &quot;Trois&quot; &quot;Cinq&quot; &quot;Six&quot; 3.1.3 Facteur Un facteur est un vecteur dont les éléments peuvent prendre que des valeurs prédéfinies. Un facteur dispose de l’argument levels qui permet de définir des catégories de valeurs. Le facteur est généralement utilisé pour stocker des variables catégorielles. Pour commencer, il faut définir un vecteur qui peut être numérique, logique ou chaine de caractères. Le facteur est une variable nominale. genre &lt;- c(&quot;Homme&quot;, &quot;Femme&quot;, &quot;Femme&quot;, &quot;Femme&quot;, &quot;Homme&quot;) genre ## [1] &quot;Homme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Homme&quot; La fonction factor() permet de créer un facteur à partir d’un vecteur. genre &lt;- factor(genre) genre ## [1] Homme Femme Femme Femme Homme ## Levels: Femme Homme On note que la sortie est légèrement différente lorsque le vecteur est mis sous forme de facteur à 2 niveaux (Femme, Homme). Ceci s’affiche à la ligne Levels. Par défaut, les niveaux d’un facteur sont affichés par ordre alphabétique et numérique croissant. Il est possible de fixer l’ordre en ajoutant l’argument levels en appliquant la fonction factor(). sexe &lt;- c(&quot;H&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;H&quot;) sexe &lt;- factor(sexe, levels = c(&quot;H&quot;, &quot;F&quot;)) sexe ## [1] H F F F H ## Levels: H F Dans le cas dans lequel on aimerait modifier un élément, il n’est pas possible d’affecter une valeur qui n’est pas défini comme un niveau. On voit donc apparaître une erreur dans la console. genre[2] &lt;- &quot;Fille&quot; ## Warning in `[&lt;-.factor`(`*tmp*`, 2, value = &quot;Fille&quot;): niveau de facteur ## incorrect, NAs générés Il est possible de renommer les niveaux en utilisant la fonction levels(). Il faut faire attention à l’ordre lorsqu’on utilise la fonction levels(). L’argument order permet d’ordonner les labels proposés. Le facteur est dès lors une variable ordinale. levels(genre) &lt;- c(&quot;Fille&quot;, &quot;Garcon&quot;) genre ## [1] Garcon &lt;NA&gt; Fille Fille Garcon ## Levels: Fille Garcon Il est possible d’avoir un facteur numérique en y affectant une catégorie avec l’argument labels lors de l’utilisation de la fonction factor(). satisfaction &lt;- factor(c(3, 3, 4, 1, 2, 1, 1), labels = c(&quot;Pas du tout d&#39;accord&quot;, &quot;Pas d&#39;accord&quot;, &quot;D&#39;accord&quot;, &quot;Tout à fait d&#39;accord&quot;), order = TRUE) satisfaction ## [1] D&#39;accord D&#39;accord Tout à fait d&#39;accord ## [4] Pas du tout d&#39;accord Pas d&#39;accord Pas du tout d&#39;accord ## [7] Pas du tout d&#39;accord ## 4 Levels: Pas du tout d&#39;accord &lt; Pas d&#39;accord &lt; ... &lt; Tout à fait d&#39;accord 3.1.4 Matrice Une matrice est un vecteur dont les éléments sont disposés sous forme d’un tableau qui comporte des lignes et des colonnes. De façon équivalente au vecteur, les éléments de la matrices doivent être de même classe (numérique, logique ou chaîne de caractères). La fonction matrix() permet de déclarer une matrice. Il faut ajouter l’argument ncol et/ou nrow pour déterminer la forme de la matrice. A &lt;- matrix(1:24, nrow=6, ncol=4, byrow=FALSE) A ## [,1] [,2] [,3] [,4] ## [1,] 1 7 13 19 ## [2,] 2 8 14 20 ## [3,] 3 9 15 21 ## [4,] 4 10 16 22 ## [5,] 5 11 17 23 ## [6,] 6 12 18 24 Par défaut, le remplissage se fait par colonne. Il faut donc mettre l’argument byrow à TRUE pour remplir la matrice par ligne. B &lt;- matrix(1:24, nrow=6, ncol=4, byrow=TRUE) B ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 ## [4,] 13 14 15 16 ## [5,] 17 18 19 20 ## [6,] 21 22 23 24 L’objet matrice dispose de la fonction dim() qui permet d’obtenir sa dimension. Le premier terme correspond aux nombres de lignes et le deuxième correspond aux nombres de colonnes. dim(B) ## [1] 6 4 Les fonctions rownames() et colnames() permettent de récupérer ou de définir les noms des lignes et des colonnes. Attention de bien mettre le bon nombre de noms aux lignes et aux colonnes. rownames(B) &lt;- c(&quot;L1&quot;, &quot;L2&quot;, &quot;L3&quot;, &quot;L4&quot;, &quot;L5&quot;, &quot;L6&quot;) colnames(B) &lt;- c(&quot;C1&quot;, &quot;C2&quot;, &quot;C3&quot;, &quot;C4&quot;) B ## C1 C2 C3 C4 ## L1 1 2 3 4 ## L2 5 6 7 8 ## L3 9 10 11 12 ## L4 13 14 15 16 ## L5 17 18 19 20 ## L6 21 22 23 24 Comme pour le vecteur, il est possible d’accéder à un ou plusieurs éléments de la matrice. Pour extraire une ligne de la matrice, il faut utiliser les crochets avec une virgule pour délimiter les deux dimensions de la matrice[ , ]. Le premier terme (celui avant la virgule) permet d’accéder aux colonnes et le deuxième terme (celui après la virgule) permet d’accéder aux lignes. Pour accéder à un seul élément, il faut indiquer la position de la ligne et de la colonne désirée. # Extraction d&#39;un seul élément A[2,3] ## [1] 14 Pour accéder à une ligne complète, il suffit de mettre la position de la ligne désirée avant la virgule. # Extraction d&#39;une ligne A[2, ] ## [1] 2 8 14 20 Pour accéder à une colonne complète, il suffit de mettre la position de la colonne désirée après la virgule. # Extraction d&#39;une colonne A[, 3] ## [1] 13 14 15 16 17 18 Pour accéder à un groupe d’élément, il faut déterminer l’intervalle des lignes et des colonnes désirées. # Extraction de quelques éléments regroupées A[3:5, 2:3] ## [,1] [,2] ## [1,] 9 15 ## [2,] 10 16 ## [3,] 11 17 3.1.5 Dataframe Un jeu de données se structure sous forme d’un tableau dans lequel chaque ligne correspond à une observation (individu) et chaque colonne à une caractéristique (variable). Les data frame sont les objets les plus utilisées lors de l’analyse d’une base de données. Contrairement aux vecteurs et aux matrices, une dataframe peut avoir différents type de variables (numérique, logique et chaînes de caractères). La fonction data.frame() permet la création de la base de données. dataframe &lt;- data.frame( ID = 1:5, Genre = c(&quot;Homme&quot;, &quot;Femme&quot;, &quot;Femme&quot;, &quot;Femme&quot;, &quot;Homme&quot;), Age = c(45, 42, 45, 43, 44) ) dataframe ## ID Genre Age ## 1 1 Homme 45 ## 2 2 Femme 42 ## 3 3 Femme 45 ## 4 4 Femme 43 ## 5 5 Homme 44 Les colonnes d’une dataframe sont toujours nommées et correspondent à la variable mesurée. Les lignes sont automatiquement numérotées par ordre. La fonction str() permet d’afficher la structure de la dataframe en affichat le nom de la variable, le type de celle-ci ainsi que les valeurs des observations. # Structure str(dataframe) ## &#39;data.frame&#39;: 5 obs. of 3 variables: ## $ ID : int 1 2 3 4 5 ## $ Genre: chr &quot;Homme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Femme&quot; ... ## $ Age : num 45 42 45 43 44 La fonction View() permet de visionner la data frame dans une autre fenêtre. # Structure View(dataframe) Afin d’analyser les données, il est important de pouvoir d’en extraire uniquement une partie. Il existe deux façons d’extraire une colonne. La première consiste à reproduire le cas de la matrice en séléctionnant la position de la colonne. # Extraction de colonnes dataframe[, 2] ## [1] &quot;Homme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Homme&quot; La deuxième option est d’utiliser le symbole $. Il doit être placé entre le nom de la data frame et le nom de la colonne. Il est conseillé d’utiliser cette option pour extraire une colonne d’une data frame. # Extraction de colonnes dataframe$Genre ## [1] &quot;Homme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Femme&quot; &quot;Homme&quot; Pour extraire une ligne de la base de donnée, il faut procéder comme pour la matrice. # Extraction de ligne dataframe[2, ] ## ID Genre Age ## 2 2 Femme 42 Pour extraire les observations (lignes) qui possèdent certaines caractéristiques, il est possible d’écrire la ligne suivante comme suit: # Extraction de ligne dataframe[dataframe$Genre == &quot;Homme&quot;, ] ## ID Genre Age ## 1 1 Homme 45 ## 5 5 Homme 44 Il est également possible de mettre plusieurs conditions. # Extraction de ligne dataframe[dataframe$Genre == &quot;Femme&quot; &amp; dataframe$Age &lt; 44, ] ## ID Genre Age ## 2 2 Femme 42 ## 4 4 Femme 43 3.2 Opérateurs logiques Opérateur Description &lt; strictement inférieur &lt;= inférieur ou égal &gt; strictement supérieur &gt;= supérieur ou égal == égal != différent !x non x x | y x ou y x &amp; y x et y "],["packages-et-données.html", "Chapter 4 Packages et données 4.1 Installation et gestion des packages 4.2 Téléchargement des données", " Chapter 4 Packages et données Ce premier chapitre introduit deux concepts importants dans R. Le premier est les packages et le second concerne les données. 4.1 Installation et gestion des packages Les packages sont des regroupements de fonctions et de jeux de données développés dans R et qui doivent se télécharger une seule fois, mais ils devront être importés à chaque utilisation. Le code ci-dessous permet d’installer le package ggplot2: install.packages(&quot;ggplot2&quot;, dependencies = TRUE) Avant chaque utilisation des packages, il est nécessaire d’importer le package grâce au code suivant: library(ggplot2) 4.2 Téléchargement des données Dans R, les bases de données se déclinent de plusieurs façons: Les bases de données peuvent être directement incluses dans R ou dans les packages. Les bases de données peuvent être créées dans l’environnement sauvées dans l’environnement R. Ces fichiers ont une extension .RData Les bases de données peuvent être issues de fichiers externes. Ces fichiers peuvent avoir différentes extensions, les plus courantes étant .csv et .txt. 4.2.1 Bases de données issues de la base de R ou des packages Le code suivant permet d’importer le jeu de données “iris” disponible de base dans R. data(iris) Un objet iris apparait dans l’environnement du projet comme le montre la figure suivante. Si les données sont dans un package, le package doit être importé au préalable. 4.2.2 Bases de données issues dans un fichier .RData Les fichiers .RData sont spécifique au language R et peuvent contenir plusieurs objets en un seul fichier. Pour importer des données, il faut utiliser la fonction load() load(&quot;04-data.RData&quot;) Tous les objets importés sont chargés dans l’environnement de travail. 4.2.3 Bases de données issues de fichiers externes Les données à analyser sont souvent disponibles dans un fichier externe sous différents formats tels que .csv ou .txt. Pour importer ces données, il existe une fonction par type de fichier (read.csv() et read.table()). Lorsqu’une de ces fonctions est utilisée, le contenu est stocké dans une dataframe. Il est nécessaire de spécifier le chemin d’accès entre votre logiciel et votre fichier à télécharger. Vous pouvez le faire de deux manières: 1. En utilisant la fonction setwd() et en spécifiant à l’intérieur la direction complète qui va permettre au logiciel de retrouver votre document dans vos fichiers. 1. En créant un projet dans lequel vous stockez vos documents. Ces fonctions acceptent des arguments qui permettent de s’adapter à la nature de fichier à importer. Parmi ces arguments, il y en a trois principaux: header qui est une valeur logique (TRUE ou FALSE) pour la présence d’un en-tête avec les noms de variables. Cet argument est mis par défaut à TRUE pour la fonction read.csv() et à FALSE pour la fonction read.table(). sep qui est le caractère dont les champs sont séparés. Cet argument est mis par défaut à ,. dec qui est le séparateur décimal. Cet argument est mis par défaut à .. Le seul argument obligatoire est le chemin d’accès au fichier à lire. Il n’est pas nécessaire de spécifier le chemin complet si le fichier à lire se trouve dans le dossier du projet. Si ce n’est pas le cas, vous devez spécifier le chemin d’accès complet à partir de ce qui a été fait avec la fonction setwd(). Pour charger une base de donnée nommé 04-data.csv dont les valeurs sont séparées par des virgules, il suffit d’écrire la ligne suivante: csv_data &lt;- read.csv(&quot;04-data.csv&quot;) csv_data ## Nom Age Note.1 Note.2 ## 1 Marc 18 5.0 5.50 ## 2 Anne 20 6.0 4.00 ## 3 Marie 21 4.5 4.75 ## 4 Jean 17 3.5 5.00 ## 5 Sophie 18 5.0 4.75 Pour charger une base de donnée nommé 04-data.txt dont les valeurs sont séparées par des points-virgules, il suffit d’écrire comme dans la ligne suivante en n’oubliant pas de sécifier le caractère de séparation avec l’argument sep=\";\". txt_data &lt;- read.table(&quot;04-data.txt&quot;, sep = &quot;;&quot;, header = TRUE) txt_data ## Nom Age Note.1 Note.2 ## 1 Marc 18 5.0 5.50 ## 2 Anne 20 6.0 4.00 ## 3 Marie 21 4.5 4.75 ## 4 Jean 17 3.5 5.00 ## 5 Sophie 18 5.0 4.75 Il est également possible de charger une base de données issues d’un fichier externe en l’important depuis le menu File &gt; Import Dataset &gt; From Text puis de sélectionner le fichier dans vos dossiers. "],["description-des-données-quantitatives-et-qualitatives.html", "Chapter 5 Description des données quantitatives et qualitatives 5.1 Description numérique 5.2 Description graphique", " Chapter 5 Description des données quantitatives et qualitatives Ce deuxième chapitre regroupe quelques fonctions pour décrire numériquement et graphiquement les variables quantitatives et qualitatives. Des fonctions spécifiques doivent être utilisées relativement à la nature de la variable. df &lt;- read.csv(&quot;sport.csv&quot;, sep = &quot;;&quot;, header = TRUE) str(df) ## &#39;data.frame&#39;: 15 obs. of 7 variables: ## $ Identifiant : int 314 323 547 336 678 442 667 890 426 789 ... ## $ Age : int 21 17 18 22 29 72 34 28 75 48 ... ## $ Poids : num 50.5 46 57.7 52 60 87 66 58.2 89 77 ... ## $ Grandeur : int 166 159 170 177 178 182 176 163 179 165 ... ## $ Satisfaction: chr &quot;extremement_satisfait&quot; &quot;moyennement_satisfait&quot; &quot;plutot_insatisfait&quot; &quot;pas_du_tout_satisfait&quot; ... ## $ Sport : int 180 120 60 30 200 0 180 60 90 320 ... ## $ Sexe : chr &quot;F&quot; &quot;F&quot; &quot;F&quot; &quot;M&quot; ... On observe qu’il existe plusieurs types de variables. 5.1 Description numérique 5.1.1 Variables qualitatives La variable “Sexe” est une variable qualitative nominale. Lorsque l’on regarde dans la base de données, on observe qu’elle est considérée comme une chaine de caractères. Il est dès lors possible de la transformer en facteur. Une situation similaire arrive avec la variable “Satisfaction” qui est une variable qualitative ordinale. Il est également possible de la transformer afin d’obtenir un facteur ordonné. Pour les deux cas, la transformation s’effectue grâce à la fonction factor(). Lorsque la variable est ordinale, des arguments doivent être ajouté afin de préciser qu’il s’agit d’un facteur ordonné et de donner l’ordre des niveaux. df$Sexe &lt;- factor(df$Sexe) df$Sexe ## [1] F F F M M M M F M F F F F M F ## Levels: F M df$Satisfaction &lt;- factor(df$Satisfaction, ordered = TRUE, levels = c(&quot;pas_du_tout_satisfait&quot;, &quot;plutot_insatisfait&quot;, &quot;moyennement_satisfait&quot;, &quot;tres_satisfait&quot;, &quot;extremement_satisfait&quot;)) df$Satisfaction ## [1] extremement_satisfait moyennement_satisfait plutot_insatisfait ## [4] pas_du_tout_satisfait tres_satisfait pas_du_tout_satisfait ## [7] moyennement_satisfait plutot_insatisfait moyennement_satisfait ## [10] tres_satisfait plutot_insatisfait pas_du_tout_satisfait ## [13] plutot_insatisfait tres_satisfait tres_satisfait ## 5 Levels: pas_du_tout_satisfait &lt; ... &lt; extremement_satisfait Pour les variables qualitatives, la description numérique classique est le tableau de contingence que l’on obtient avec la fonction table(). Il est possible de décrire chaque variable à la fois ou de décrire une variable en fonction d’une autre. table(df$Sexe) ## ## F M ## 9 6 table(df$Satisfaction) ## ## pas_du_tout_satisfait plutot_insatisfait moyennement_satisfait ## 3 4 3 ## tres_satisfait extremement_satisfait ## 4 1 table(df$Sexe, df$Satisfaction) ## ## pas_du_tout_satisfait plutot_insatisfait moyennement_satisfait ## F 1 4 1 ## M 2 0 2 ## ## tres_satisfait extremement_satisfait ## F 2 1 ## M 2 0 5.1.2 Variables quantitatives Les variables quantitatives sont généralement décrites à l’aide de: 1. Mesures de tendance centrale: mode, moyenne, médiane 1. Mesures de dispersion: étendue, espace interquartile, variance et écart-type La moyenne et la médiane peuvent se calculer directement avec les fonctions mean()et median() respectivement. Le mode d’une variable peut s’obtenir en analysant le tableau de contingence. Dans notre cas, on observe qu’il n’y a pas de mode étant donné qu’aucun âge apparaît plusieurs fois. mean(df$Age) ## [1] 34.66667 median(df$Age) ## [1] 29 table(df$Age) ## ## 17 18 20 21 22 25 28 29 32 34 35 44 48 72 75 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 L’étendue d’une variable peut s’obtenir en soustrayant la valeur maximale et la valeur minimale d’une variable. La variance et l’écart-type s’obtiennent directement avec les fonctions var()et sd()respectivement. L’espace interquartile, utilisé pour construire le boxplot, s’obtient grâce à la fonction IQR(). min(df$Age) ## [1] 17 max(df$Age) ## [1] 75 max(df$Age)-min(df$Age) ## [1] 58 var(df$Age) ## [1] 329.6667 sd(df$Age) ## [1] 18.15673 IQR(df$Age) ## [1] 18 5.2 Description graphique 5.2.1 Variables qualitatives Les variables qualitatives peuvent être représentées grâce à des graphiques en barre ou des graphiques en camembert. Les fonctions barplot()et pie()permettent de représenter les tableaux de contingence. Pour rappel, il est possible de sauver un objet dans l’environnement et de l’utiliser ensuite directement pour faire les graphes. C’est ce qui est proposé pour le tableau de contigence de la variable “Satisfaction”. barplot(table(df$Sexe)) tableSatisfaction &lt;- table(df$Satisfaction) barplot(tableSatisfaction) par(mar=c(11,4,4,4)) barplot(tableSatisfaction, las=2) pie(tableSatisfaction) 5.2.2 Variables quantitatives Les variables quantitatives peuvent être représentées grâce à des histogrammes ou des boxplots. Les histogrammes permettent de représenter la fréquence de chaque valeur de la variable, tandis que les boxplots représente la distribution de la variable à l’aide des quartiles. Il est possible de spécifier des arguments dans la fonction graphiques afin de donner un titre ou de nomme un axe. hist(df$Age, main=&quot;Histogramme de l&#39;age&quot;, xlab = &quot;Age&quot;) boxplot(df$Age) "]]
